/**
 * This is a common configuration file for all versions of the MonetDB GDK library sources.
 * It is auto-generated by cmake (monetdb_config.h.in -> monetdb_config.h), unlike MonetDB's
 * full source package, which uses autotools.
 *
 * Since this file caters to multiple versions, not all defines are necessary in use by all
 * versions - but this file has been culled so that, at least initially, each definition
 * is in some use by one of the GDK versions.
 */

#pragma once
#ifndef _SEEN_MONETDB_CONFIG_H
#define _SEEN_MONETDB_CONFIG_H 1


/* Directory separator */
#define DIR_SEP '@DIR_SEP@'

/* Directory separator */
#define DIR_SEP_STR "@DIR_SEP@"

/* Define if you have the <dirent.h> header file. */
#cmakedefine HAVE_DIRENT_H

/* Define if you have the <dlfcn.h> header file. */
#cmakedefine HAVE_DLFCN_H

/* Define if you have the <fcntl.h> header file. */
#cmakedefine HAVE_FCNTL_H

/* Define if you have the `ftime' function. */
#cmakedefine HAVE_FTIME

/* Define if you have the `gettimeofday' function. */
#cmakedefine HAVE_GETTIMEOFDAY

/* Define if the system has the type `intptr_t'. */
#cmakedefine HAVE_INTPTR_T

/* Define if you have the <inttypes.h> header file. */
#cmakedefine HAVE_INTTYPES_H

/* Define if you have the <kvm.h> header file. */
/* #undef HAVE_KVM_H */

/* Define if you have the <mach/mach_init.h> header file. */
/* #undef HAVE_MACH_MACH_INIT_H */

/* Define if you have the <mach/task.h> header file. */
/* #undef HAVE_MACH_TASK_H */

/* Define if you have the `madvise' function. */
#cmakedefine HAVE_MADVISE

/* Define if you have the `posix_fadvise' function. */
#cmakedefine HAVE_POSIX_FADVISE

/* Define if you have the `posix_madvise' function. */
#cmakedefine HAVE_POSIX_MADVISE

/* Define if you have the <procfs.h> header file. */
/* #undef HAVE_PROCFS_H */

/* Define if you have the <pwd.h> header file. */
#cmakedefine HAVE_PWD_H

/* Define if you have the <semaphore.h> header file. */
#cmakedefine HAVE_SEMAPHORE_H

/* Define if you have the `setenv' function. */
#cmakedefine HAVE_SETENV

/* Define if you have the <stdint.h> header file. */
#cmakedefine HAVE_STDINT_H

/* Define if you have the <stdlib.h> header file. */
#cmakedefine HAVE_STDLIB_H

/* Define if you have the <strings.h> header file. */
#cmakedefine HAVE_STRINGS_H

/* Define if you have the <string.h> header file. */
#cmakedefine HAVE_STRING_H

/* Define if you have the <sys/file.h> header file. */
#cmakedefine HAVE_SYS_FILE_H

/* Define if you have the <sys/mman.h> header file. */
#cmakedefine HAVE_SYS_MMAN_H

/* Define if you have the <sys/param.h> header file. */
#cmakedefine HAVE_SYS_PARAM_H

/* Define if you have the <sys/stat.h> header file. */
#cmakedefine HAVE_SYS_STAT_H

/* Define if you have the <sys/sysctl.h> header file. */
#cmakedefine HAVE_SYS_SYSCTL_H

/* Define if you have the <sys/times.h> header file. */
#cmakedefine HAVE_SYS_TIMES_H

/* Define if you have the <sys/time.h> header file. */
#cmakedefine HAVE_SYS_TIME_H

/* Define if you have the <sys/types.h> header file. */
#cmakedefine HAVE_SYS_TYPES_H

/* Define if you have the `uname' function. */
#cmakedefine HAVE_UNAME

/* Define if you have the <unistd.h> header file. */
#cmakedefine HAVE_UNISTD_H

/* Define if you have the <winsock.h> header file. */
#cmakedefine HAVE_WINSOCK_H

/* Define if the system has the type `__int128'. */
#cmakedefine HAVE___INT128

/* Define if the system has the type `__int64'. */
#cmakedefine HAVE___INT64

/* Define if the system has the type `__int128_t'. */
#cmakedefine HAVE___INT128_T

/* Define if the system has the type `__uint128_t'. */
#cmakedefine HAVE___UINT128_T

/* Define to 1 if the system has the type `long long'. */
#cmakedefine HAVE_LONG_LONG

/* The size of `char', as computed by sizeof. */
@SIZEOF_CHAR_CODE@

/* The size of `int', as computed by sizeof. */
@SIZEOF_INT_CODE@

/* The size of `long', as computed by sizeof. */
@SIZEOF_LONG_CODE@

/* The size of `ptrdiff_t', as computed by sizeof. */
@SIZEOF_PTRDIFF_T_CODE@

/* The size of `short', as computed by sizeof. */
@SIZEOF_SHORT_CODE@

/* The size of `size_t', as computed by sizeof. */
@SIZEOF_SIZE_T_CODE@

/* The size of `ssize_t', as computed by sizeof. */
@SIZEOF_SSIZE_T_CODE@

/* The size of `void *', as computed by sizeof. */
@SIZEOF_VOID_P_CODE@

/* The size of `wchar_t', as computed by sizeof. */
@SIZEOF_WCHAR_T_CODE@

/* The size of `__int128', as computed by sizeof. */
@SIZEOF___INT128_CODE@

/* The size of `__int128_t', as computed by sizeof. */
@SIZEOF___INT128_T_CODE@

/* The size of `long long', as computed by sizeof. */
@SIZEOF_LONG_LONG_CODE@


/* Enable extensions on AIX 3, Interix.  */
#ifndef _ALL_SOURCE
# define _ALL_SOURCE 1
#endif
/* Enable GNU extensions on systems that have them.  */
#ifndef _GNU_SOURCE
# define _GNU_SOURCE 1
#endif
/* Enable threading extensions on Solaris.  */
#ifndef _POSIX_PTHREAD_SEMANTICS
# define _POSIX_PTHREAD_SEMANTICS 1
#endif
/* Enable extensions on HP NonStop.  */
#ifndef _TANDEM_SOURCE
# define _TANDEM_SOURCE 1
#endif
/* Enable general extensions on Solaris.  */
#ifndef __EXTENSIONS__
# define __EXTENSIONS__ 1
#endif


/* Define on Microsoft Windows (also under Cygwin) */
/* #undef WIN32 */

/***************************************************************************
   TODO: Currently not performing CMake platform checks for the 
   "hidden" and "restrict" keyword definition choices.
 ***************************************************************************/

/* Define WORDS_BIGENDIAN to 1 if your processor stores words with the most
   significant byte first (like Motorola and SPARC, unlike Intel). */
#cmakedefine WORDS_BIGENDIAN 1

/* Does your compiler support the `__hidden' specifier? */
#define __hidden /* empty */

/* Define to the equivalent of the C99 'restrict' keyword, or to
   nothing if this is not supported.  Do not define if restrict is
   supported directly.  */
#define restrict __restrict
/* Work around a bug in Sun C++: it does not support _Restrict or
   __restrict__, even though the corresponding Sun C compiler ends up with
   "#define restrict _Restrict" or "#define restrict __restrict__" in the
   previous line.  Perhaps some future version of Sun C++ will work with
   restrict; if so, hopefully it defines __RESTRICT like Sun C does.  */
#if defined __SUNPRO_CC && !defined __RESTRICT
# define _Restrict
# define __restrict__
#endif

/* Define to `unsigned int' if <sys/types.h> does not define. */
/* #undef size_t */

/* Define to `int' if <sys/types.h> does not define. */
/* #undef ssize_t */


#ifdef HAVE_SYS_TYPES_H
# include <sys/types.h>
#endif

#include <stdio.h>		/* NULL, printf etc. */

#include <stdlib.h>
#include <errno.h>
#include <stdarg.h>		/* va_alist.. */
#include <inttypes.h>
#include <stdbool.h>
#include <assert.h>

#if defined(HAVE___INT128)
__extension__ typedef __int128 hge;
__extension__ typedef unsigned __int128 uhge;
#define HAVE_HGE 1
#define SIZEOF_HGE SIZEOF___INT128
#elif defined(HAVE___INT128_T) && defined(HAVE___UINT128_T)
__extension__ typedef __int128_t hge;
__extension__ typedef __uint128_t uhge;
#define HAVE_HGE 1
#define SIZEOF_HGE SIZEOF___INT128_T
#endif

/*
 * This condition is generated by cmake, so don't be surprised that it's
 * trivial once this file is a proper .h
 */
#if @GDK_VERSION@ < 061040


#ifdef HAVE_LONG_LONG
typedef long long lng;
typedef unsigned long long ulng;
# define SIZEOF_LNG SIZEOF_LONG_LONG
#else
# ifdef HAVE___INT64
typedef __int64 lng;
typedef unsigned __int64 ulng;
#  define SIZEOF_LNG SIZEOF___INT64
# endif
#endif


/* Messed-up pre-v061040 printf format specifiers. They're messed up because
 * they - and the MonetDB codebase in general - doesn't. It's not easy to tell
 * when "long long" means "64-bits". Anyway, this is written by induction
 * from the definition of the lng type - hope it works.
 */ 
#ifdef HAVE_LONG_LONG
#define LLFMT  "%lld"
#define ULLFMT "%ulld"
#else
# ifdef HAVE___INT64
#define LLFMT  "%" PRId64
#define ULLFMT "%" PRIu64
# endif
#endif

/* define printf formats for printing size_t and ssize_t variables */
#if (defined(__STDC_VERSION__) && __STDC_VERSION__ >= 199901 && !defined(__svr4__) && !defined(WIN32) && !defined(__sgi)) || __GNUC__ > 3
# define SZFMT "%zu"
# define SSZFMT "%zd"
#elif defined(__MINGW32__)
# define SZFMT "%u"
# define SSZFMT "%ld"
#elif SIZEOF_SIZE_T == SIZEOF_INT
# define SZFMT "%u"
# define SSZFMT "%d"
#elif SIZEOF_SIZE_T == SIZEOF_LONG
# define SZFMT "%lu"
# define SSZFMT "%ld"
#elif SIZEOF_SIZE_T == SIZEOF_LONG_LONG || SIZEOF_SIZE_T == SIZEOF___INT64
# define SZFMT ULLFMT
# define SSZFMT LLFMT
#else
# error no definition for SZFMT/SSZFMT
#endif

/* define printf format for printing pointer values */
#if defined(__STDC_VERSION__) && __STDC_VERSION__ >= 199901
#define PTRFMT		"%p"
#define PTRFMTCAST		/* no cast needed */
#elif defined(_MSC_VER)
#define PTRFMT		"%p"
#define PTRFMTCAST
#elif SIZEOF_VOID_P == SIZEOF_INT
#define PTRFMT		"%x"
#define PTRFMTCAST	(unsigned int)
#elif SIZEOF_VOID_P == SIZEOF_LONG
#define PTRFMT		"%lx"
#define PTRFMTCAST	(unsigned long)
#elif SIZEOF_VOID_P == SIZEOF_LONG_LONG
#define PTRFMT		"%llx"
#define PTRFMTCAST	(unsigned long long)
#else
#error no definition for PTRFMT
#endif

#endif


/* defines to help the compiler check printf-style format arguments */
#if !defined(__GNUC__) || __GNUC__ < 2 || (__GNUC__ == 2 && __GNUC_MINOR__ < 5)
/* This feature is available in gcc versions 2.5 and later.  */
# ifndef __attribute__
#  define __attribute__(Spec) /* empty */
# endif
#else
/* The __-protected variants of `format' and `printf' attributes are
 * accepted by gcc versions 2.6.4 (effectively 2.7) and later.  */
# if !defined(__format__) && (__GNUC__ < 2 || (__GNUC__ == 2 && __GNUC_MINOR__ < 7))
#  define __format__ format
#  define __printf__ printf
# endif
#endif
#if !defined(_MSC_VER) && !defined(_In_z_)
# define _In_z_
# define _Printf_format_string_
# define __declspec(x)
#endif

#endif /* _SEEN_MONETDB_CONFIG_H */

